package main

import "fmt"

func main() {
	hours := []int{11, 14, 11, 16, 11, 16, 0, 7, 7, 10, 16, 9, 4, 3, 3, 4, 7, 16, 8, 10, 13, 1, 9, 3, 11, 0, 16, 7, 3, 3, 8, 6, 7, 11, 13, 4, 0, 9, 0, 13, 8, 15, 16, 6, 5, 9, 13, 7, 2, 4, 13, 2, 5, 3, 4, 15, 14, 15, 1, 9, 13, 13, 7, 8, 15, 5, 16, 5, 13, 0, 5, 3, 4, 16, 12, 2, 6, 16, 0, 8, 13, 8, 4, 11, 5, 8, 16, 1, 10, 0, 9, 12, 3, 0, 14, 12, 11, 8, 15, 8, 16, 4, 16, 7, 5, 4, 3, 9, 2, 4, 14, 6, 13, 5, 14, 6, 9, 9, 7, 3, 4, 13, 10, 16, 5, 2, 0, 9, 16, 10, 14, 7, 13, 14, 9, 0, 9, 10, 13, 2, 7, 2, 16, 11, 12, 10, 15, 1, 1, 3, 12, 7, 8, 12, 10, 11, 7, 14, 1, 6, 16, 9, 6, 12, 10, 0, 14, 4, 13, 14, 11, 13, 7, 16, 2, 14, 0, 12, 13, 14, 12, 14, 14, 4, 0, 7, 3, 5, 1, 0, 14, 13, 0, 12, 7, 16, 1, 14, 5, 11, 4, 7, 3, 7, 15, 10, 3, 6, 9, 12, 12, 6, 7, 11, 13, 15, 0, 3, 11, 7, 1, 8, 9, 13, 16, 2, 13, 16, 1, 2, 13, 11, 13, 13, 12, 9, 5, 7, 1, 16, 16, 13, 16, 11, 6, 7, 3, 13, 0, 15, 7, 8, 11, 9, 3, 9, 16, 0, 0, 0, 0, 5, 16, 3, 8, 16, 14, 2, 16, 9, 0, 16, 15, 16, 4, 9, 12, 14, 4, 3, 16, 13, 2, 4, 1, 10, 8, 4, 4, 16, 1, 8, 8, 2, 3, 14, 0, 16, 12, 1, 11, 11, 1, 6, 4, 15, 3, 0, 15, 6, 7, 5, 9, 3, 13, 4, 5, 8, 2, 9, 6, 7, 2, 6, 2, 8, 4, 1, 5, 9, 16, 6, 13, 6, 12, 9, 5, 1, 0, 14, 5, 2, 13, 9, 8, 8, 0, 5, 13, 0, 11, 8, 15, 11, 1, 1, 4, 5, 8, 15, 16, 16, 14, 10, 6, 12, 3, 5, 10, 8, 9, 5, 0, 16, 2, 0, 1, 11, 4, 3, 10, 15, 11, 10, 0, 1, 2, 7, 12, 4, 15, 6, 1, 6, 8, 2, 10, 8, 8, 10, 14, 0, 0, 10, 1, 10, 11, 3, 14, 2, 5, 8, 9, 1, 4, 7, 8, 9, 1, 7, 14, 0, 1, 13, 12, 0, 2, 2, 5, 8, 12, 16, 5, 2, 3, 2, 10, 8, 7, 4, 4, 15, 16, 5, 6, 16, 12, 14, 16, 1, 9, 7, 0, 9, 16, 0, 10, 6, 10, 1, 5, 12, 7, 0, 12, 5, 15, 10, 4, 9, 5, 4, 11, 13, 8, 10, 1, 9, 16, 8, 10, 1, 4, 9, 11, 2, 13, 7, 8, 6, 11, 4, 7, 12, 6, 5, 3, 1, 14, 15, 14, 2, 0, 14, 6, 14, 10, 11, 6, 11, 15, 13, 5, 6, 9, 11, 10, 2, 4, 1, 0, 12, 7, 15, 5, 4, 0, 16, 2, 7, 12, 14, 13, 4, 0, 15, 14, 10, 9, 6, 10, 5, 8, 7, 2, 12, 4, 7, 10, 14, 2, 13, 7, 1, 11, 13, 12, 16, 11, 6, 10, 11, 9, 2, 14, 2, 10, 5, 5, 0, 13, 13, 0, 12, 10, 9, 14, 2, 4, 13, 3, 11, 3, 10, 12, 1, 0, 8, 8, 8, 14, 16, 15, 9, 8, 7, 11, 4, 8, 5, 7, 9, 1, 8, 8, 12, 10, 9, 3, 2, 5, 1, 6, 3, 12, 5, 7, 9, 7, 1, 3, 5, 10, 3, 15, 6, 9, 11, 16, 5, 5, 1, 13, 15, 9, 10, 15, 11, 0, 9, 3, 7, 16, 2, 12, 4, 12, 13, 10, 6}
	max := 0
	if num, check := checkIfWellPerforming(hours); check == true {
		fmt.Println(num)
	}
	n := len(hours) - 1
	for {
		if n == 0 {
			break
		}
		end := n
		for start := 0; start+n <= len(hours); start++ {

			ans, isWell := checkIfWellPerforming(hours[start:end])
			if isWell {
				if ans > max {
					max = ans
				}
			}
			end++
		}

		n--
	}
	fmt.Println(max)
}

func longestWPI(hours []int) int {
	return 0
}

func checkIfWellPerforming(hours []int) (int, bool) {
	t_day, nt_day := 0, 0
	for i := 0; i < len(hours); i++ {
		if hours[i] > 8 {
			t_day++
		} else {
			nt_day++
		}
	}
	if nt_day >= t_day {
		return 0, false
	} else {
		return len(hours), true
	}
}
