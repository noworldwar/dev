// Code generated by protoc-gen-go. DO NOT EDIT.
// source: calc.proto

// 生成的程式在 Go 中屬於pb套件

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// CalcRequest 會傳送兩個參數到計算服務進行運算
type CalcRequest struct {
	NumA                 int32    `protobuf:"varint,1,opt,name=num_a,json=numA,proto3" json:"num_a,omitempty"`
	NumB                 int32    `protobuf:"varint,2,opt,name=num_b,json=numB,proto3" json:"num_b,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CalcRequest) Reset()         { *m = CalcRequest{} }
func (m *CalcRequest) String() string { return proto.CompactTextString(m) }
func (*CalcRequest) ProtoMessage()    {}
func (*CalcRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2b9900dc883ea68, []int{0}
}

func (m *CalcRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CalcRequest.Unmarshal(m, b)
}
func (m *CalcRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CalcRequest.Marshal(b, m, deterministic)
}
func (m *CalcRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CalcRequest.Merge(m, src)
}
func (m *CalcRequest) XXX_Size() int {
	return xxx_messageInfo_CalcRequest.Size(m)
}
func (m *CalcRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CalcRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CalcRequest proto.InternalMessageInfo

func (m *CalcRequest) GetNumA() int32 {
	if m != nil {
		return m.NumA
	}
	return 0
}

func (m *CalcRequest) GetNumB() int32 {
	if m != nil {
		return m.NumB
	}
	return 0
}

// CalReply 是計算結果，回傳給客戶端
type CalcReply struct {
	Result               int32    `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CalcReply) Reset()         { *m = CalcReply{} }
func (m *CalcReply) String() string { return proto.CompactTextString(m) }
func (*CalcReply) ProtoMessage()    {}
func (*CalcReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2b9900dc883ea68, []int{1}
}

func (m *CalcReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CalcReply.Unmarshal(m, b)
}
func (m *CalcReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CalcReply.Marshal(b, m, deterministic)
}
func (m *CalcReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CalcReply.Merge(m, src)
}
func (m *CalcReply) XXX_Size() int {
	return xxx_messageInfo_CalcReply.Size(m)
}
func (m *CalcReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CalcReply.DiscardUnknown(m)
}

var xxx_messageInfo_CalcReply proto.InternalMessageInfo

func (m *CalcReply) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

func init() {
	proto.RegisterType((*CalcRequest)(nil), "pb.CalcRequest")
	proto.RegisterType((*CalcReply)(nil), "pb.CalcReply")
}

func init() { proto.RegisterFile("calc.proto", fileDescriptor_a2b9900dc883ea68) }

var fileDescriptor_a2b9900dc883ea68 = []byte{
	// 166 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4a, 0x4e, 0xcc, 0x49,
	0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x52, 0x32, 0xe7, 0xe2, 0x76, 0x4e,
	0xcc, 0x49, 0x0e, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x12, 0xe6, 0x62, 0xcd, 0x2b, 0xcd,
	0x8d, 0x4f, 0x94, 0x60, 0x54, 0x60, 0xd4, 0x60, 0x0d, 0x62, 0xc9, 0x2b, 0xcd, 0x75, 0x84, 0x09,
	0x26, 0x49, 0x30, 0xc1, 0x05, 0x9d, 0x94, 0x94, 0xb9, 0x38, 0x21, 0x1a, 0x0b, 0x72, 0x2a, 0x85,
	0xc4, 0xb8, 0xd8, 0x8a, 0x52, 0x8b, 0x4b, 0x73, 0x4a, 0xa0, 0xfa, 0xa0, 0x3c, 0xa3, 0x74, 0x2e,
	0x2e, 0x90, 0xa2, 0xd2, 0x9c, 0xc4, 0x92, 0xfc, 0x22, 0x21, 0x0d, 0x2e, 0x96, 0x80, 0x9c, 0xd2,
	0x62, 0x21, 0x7e, 0xbd, 0x82, 0x24, 0x3d, 0x24, 0x5b, 0xa5, 0x78, 0x11, 0x02, 0x05, 0x39, 0x95,
	0x4a, 0x0c, 0x42, 0xfa, 0x5c, 0xdc, 0xc1, 0xa5, 0x49, 0x25, 0x45, 0x89, 0xc9, 0x25, 0x99, 0xf9,
	0x79, 0x84, 0x35, 0x24, 0xb1, 0x81, 0x7d, 0x64, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x1f, 0x32,
	0xda, 0x51, 0xdf, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CalculatorClient is the client API for Calculator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CalculatorClient interface {
	// Plus會接收 CalcRequest 資料作加總，回傳 CalcReply
	Plus(ctx context.Context, in *CalcRequest, opts ...grpc.CallOption) (*CalcReply, error)
	Subtraction(ctx context.Context, in *CalcRequest, opts ...grpc.CallOption) (*CalcReply, error)
}

type calculatorClient struct {
	cc *grpc.ClientConn
}

func NewCalculatorClient(cc *grpc.ClientConn) CalculatorClient {
	return &calculatorClient{cc}
}

func (c *calculatorClient) Plus(ctx context.Context, in *CalcRequest, opts ...grpc.CallOption) (*CalcReply, error) {
	out := new(CalcReply)
	err := c.cc.Invoke(ctx, "/pb.Calculator/Plus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculatorClient) Subtraction(ctx context.Context, in *CalcRequest, opts ...grpc.CallOption) (*CalcReply, error) {
	out := new(CalcReply)
	err := c.cc.Invoke(ctx, "/pb.Calculator/Subtraction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CalculatorServer is the server API for Calculator service.
type CalculatorServer interface {
	// Plus會接收 CalcRequest 資料作加總，回傳 CalcReply
	Plus(context.Context, *CalcRequest) (*CalcReply, error)
	Subtraction(context.Context, *CalcRequest) (*CalcReply, error)
}

// UnimplementedCalculatorServer can be embedded to have forward compatible implementations.
type UnimplementedCalculatorServer struct {
}

func (*UnimplementedCalculatorServer) Plus(ctx context.Context, req *CalcRequest) (*CalcReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Plus not implemented")
}
func (*UnimplementedCalculatorServer) Subtraction(ctx context.Context, req *CalcRequest) (*CalcReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subtraction not implemented")
}

func RegisterCalculatorServer(s *grpc.Server, srv CalculatorServer) {
	s.RegisterService(&_Calculator_serviceDesc, srv)
}

func _Calculator_Plus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculatorServer).Plus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Calculator/Plus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculatorServer).Plus(ctx, req.(*CalcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calculator_Subtraction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculatorServer).Subtraction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Calculator/Subtraction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculatorServer).Subtraction(ctx, req.(*CalcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Calculator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Calculator",
	HandlerType: (*CalculatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Plus",
			Handler:    _Calculator_Plus_Handler,
		},
		{
			MethodName: "Subtraction",
			Handler:    _Calculator_Subtraction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "calc.proto",
}
